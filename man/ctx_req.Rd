% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/context.R
\name{ctx_req}
\alias{ctx_req}
\title{Request over Context (Client for Req/Rep Protocol)}
\usage{
ctx_req(
  context,
  data,
  send_mode = c("serial", "raw"),
  recv_mode = c("serial", "character", "complex", "double", "integer", "logical",
    "numeric", "raw"),
  timeout,
  keep.raw = TRUE
)
}
\arguments{
\item{context}{a Context.}

\item{data}{an R object (if mode is not 'serial', an R vector).}

\item{send_mode}{[default 'serial'] whether data will be sent serialized or
as a raw vector. Use 'serial' for sending and receiving within R to ensure
perfect reproducibility. Use 'raw' for sending vectors of any type (will be
converted to a raw byte vector for sending) - essential when interfacing
with external applications.}

\item{recv_mode}{[default 'serial'] mode of vector to be read - one of 'serial',
'character', 'complex', 'double', 'integer', 'logical', 'numeric', or 'raw'.
The default 'serial' means a serialised R object, for the other modes,
the raw vector received will be converted into the respective mode.}

\item{timeout}{in ms. If unspecified, a socket-specific default timeout will
be used. Note this applies to each of the send and receive legs, hence the
total elapsed time could be up to twice this parameter.}

\item{keep.raw}{[default TRUE] logical flag whether to keep the received raw
vector (useful for verification e.g. via hashing). If FALSE, will return
the converted data only.}
}
\value{
Named list of 2 elements: 'raw' containing the raw vector received
    from the server and 'data' containing the converted R object, or else the
    converted R object if 'keep.raw' is set to FALSE.
}
\description{
Implements a caller/client for the req node of the req/rep protocol. Sends
    data to the rep node (executor/server) and awaits the result to be returned.
}
\details{
Async recv will block while awaiting a response from the server and
    is usually the desired behaviour. Set a timeout to allow the function to
    return in case of no response.

    In case of an error in unserialisation or data conversion, the function
    will return the received raw vector to allow the data to be recovered.
}
\examples{
req <- socket("req", listen = "tcp://127.0.0.1:6546")
rep <- socket("rep", dial = "tcp://127.0.0.1:6546")

ctxq <- context(req)
ctxp <- context(rep)

# works if req and rep are running in parallel in different processes
ctx_rep(ctxp, execute = function(x) x + 1, timeout = 10)
ctx_req(ctxq, data = 2022, timeout = 10)

close(req)
close(rep)

}
