% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{cv}
\alias{cv}
\alias{wait}
\alias{until}
\alias{cv_value}
\alias{cv_reset}
\title{Condition Variables}
\usage{
cv()

wait(cv)

until(cv, msec)

cv_value(cv)

cv_reset(cv)
}
\arguments{
\item{cv}{a 'conditionVariable' object.}

\item{msec}{maximum time in milliseconds to wait for the condition variable
to be signalled.}
}
\value{
For \code{cv}: a 'conditionVariable' object.

    For \code{wait} and \code{until}: invisible NULL.

    For \code{cv_value} and \code{cv_reset}: integer value of the condition
    variable.
}
\description{
\code{cv} creates a new condition variable (protected by a mutex).

\code{wait} waits on a condition being signalled by completion of an
    asynchronous receive.

\code{until} waits until a future time on a condition being signalled by
    completion of an asynchronous receive.

\code{cv_value} and \code{cv_reset} are auxiliary functions to respectively
    obtain and reset the internal value of a condition variable.
}
\details{
Pass the 'conditionVariable' to the special signalling forms
    of the asynchronous receive functions: \code{\link{recv_aio_signal}} or
    \code{\link{request_signal}}.

    Completion of the receive, which happens asynchronously and independently
    of the main R thread, will signal the condition variable by incrementing
    it by 1. This will cause the R execution thread waiting on the condition
    variable using \code{wait} or \code{until} to wake and continue.

    The condition internal to this 'conditionVariable' maintains a state
    (counter). Each signal increments the counter by 1. Each time
    \code{wait} or \code{until} returns (apart from due to timeout), the
    counter is decremented by 1.

    The internal condition may be queried at any time using \code{cv_value}
    and reset to zero using \code{cv_reset}. This affords a high degree of
    flexibility in designing complex concurrent applications.

    Technical information: internal to the 'conditionVariable' object is a
    mutex. All actions on the condition variable are performed while holding
    the mutex (apart from simply reading the value by \code{cv_value}). These
    functions are cross-platform and expose capabilities present in the NNG
    library.

For \code{until}: if 'msec' is non-integer, it will be coerced to
    integer. Non-numeric input will be ignored and return immediately.
}
\examples{
cv <- cv()

# wait(cv) # uncommenting will block until the cv is signalled

until(cv, 10L)

cv_value(cv)

cv_reset(cv)

}
