% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{cv}
\alias{cv}
\alias{wait}
\alias{until}
\alias{reset}
\title{Condition Variables}
\usage{
cv()

wait(cv)

until(cv, msec)

reset(cv)
}
\arguments{
\item{cv}{a 'conditionVariable' object.}

\item{msec}{maximum time in milliseconds to wait for the condition variable
to be signalled.}
}
\value{
For \code{cv()}, a 'conditionVariable' object, otherwise invisible
    NULL.
}
\description{
Use \code{cv()} to creates a new condition variable (protected by a mutex).
    Other functions will wait on this condition being signalled by completion
    of an asynchronous receive, wait until a certain time has elapsed, or
    allows the internal state of the condition to be reset.
}
\details{
Pass the 'conditionVariable' object to the special \code{cv_} forms
    of the functions returning 'recvAio' objects. Completion of the receive,
    which happens asynchronously will signal the condition variable by
    incrementing it by 1.

    This will cause threads waiting on the condition variable using
    \code{wait()} or \code{until()} to wake.

    The condition internal to this 'conditionVariable' maintains a state.
    Each signal increments the condition by 1. Each time \code{wait()}
    or \code{until()} returns after being woken (i.e. not due to timeout),
    the condition is decremented by 1.

    For \code{until()}, if 'msec' is non-integer, it will be coerced to
    integer. Non-numeric input will be ignored and return immediately.
}
\examples{
cv <- cv()

# wait(cv) # uncommenting will block until the cv is signalled

until(cv, 10L)

reset(cv)

}
