% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sync.R
\name{cv}
\alias{cv}
\title{Condition Variables}
\usage{
cv()
}
\value{
A 'conditionVariable' object.
}
\description{
Creates a new condition variable (protected by a mutex internal to the
    object).
}
\details{
Pass the 'conditionVariable' to the signalling forms of the
    asynchronous receive functions: \code{\link{recv_aio_signal}} or
    \code{\link{request_signal}}. Alternatively, to be notified of a pipe
    event, pass it to \code{\link{pipe_notify}}.

    Completion of the receive or pipe event, which happens asynchronously and
    independently of the main R thread, will signal the condition variable by
    incrementing it by 1.

    This will cause the R execution thread waiting on the condition variable
    using \code{\link{wait}} or \code{\link{until}} to wake and continue.

    For argument 'msec', non-integer values will be coerced to integer.
    Non-numeric input will be ignored and return immediately.
}
\section{Condition}{


    The condition internal to this 'conditionVariable' maintains a state
    (value). Each signal increments the value by 1. Each time
    \code{\link{wait}} or \code{\link{until}} returns (apart from due to
    timeout), the value is decremented by 1.

    The internal condition may be inspected at any time using
    \code{\link{cv_value}} and reset using \code{\link{cv_reset}}. This
    affords a high degree of flexibility in designing complex concurrent
    applications.
}

\section{Flag}{


    The condition variable also contains a flag that certain signalling
    functions such as \code{\link{pipe_notify}} can set. When this flag has
    been set, all subsequent \code{\link{wait}} calls will return logical
    FALSE instead of TRUE.

    Note that the flag is not automatically reset, but may be reset manually
    using \code{\link{cv_reset}}.
}

\examples{
cv <- cv()
cv

}
