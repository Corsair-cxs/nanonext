% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{cv}
\alias{cv}
\alias{wait}
\alias{until}
\alias{reset}
\title{Condition Variables}
\usage{
cv()

wait(cv)

until(cv, msec)

reset(cv)
}
\arguments{
\item{cv}{a 'conditionVariable' object.}

\item{msec}{maximum time in milliseconds to wait for the condition variable
to be signalled.}
}
\value{
For \code{cv}: a 'conditionVariable' object.

    For other functions: invisible NULL.
}
\description{
Use \code{cv} to create a new condition variable (protected by a mutex).

Use \code{wait} to wait on a condition being signalled by completion of an
    asynchronous receive.

Use \code{until} to wait until a future time on a condition being signalled
    by completion of an asynchronous receive.

Use \code{reset} to reset the internal state of a condition variable.
}
\details{
Pass the 'conditionVariable' to the special signalling forms
    of the asynchronous receive functions: \code{\link{recv_aio_signal}} or
    \code{\link{request_signal}}.

    Completion of the receive, which happens
    asynchronously and independently of the main R thread, will signal the
    condition variable by incrementing it by 1. This will cause the R
    execution thread waiting on the condition variable using \code{wait} or
    \code{until} to wake and continue.

    The condition internal to this 'conditionVariable' maintains a state
    (counter). Each signal increments the counter by 1. Each time
    \code{wait} or \code{until} returns after being woken (i.e. not due
    to timeout), the counter is decremented by 1.

    This, coupled with the ability to reset the internal condition state at
    any time using \code{reset}, affords a high degree of flexibility in
    designing complex concurrent applications.

    Technical information: internal to the 'conditionVariable' object is a
    mutex. All actions on the condition variable are performed while holding
    the mutex. These functions are cross-platform and rely on the capabilities
    exposed by the NNG library.

For \code{until}: if 'msec' is non-integer, it will be coerced to
    integer. Non-numeric input will be ignored and return immediately.
}
\examples{
cv <- cv()

# wait(cv) # uncommenting will block until the cv is signalled

until(cv, 10L)

reset(cv)

}
