% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stream.R
\name{stream_recv_aio}
\alias{stream_recv_aio}
\title{Receive via Stream (Async)}
\usage{
stream_recv_aio(
  stream,
  mode = c("character", "complex", "double", "integer", "logical", "numeric", "raw"),
  keep.raw = TRUE,
  bytes = 10000,
  timeout
)
}
\arguments{
\item{stream}{a Stream.}

\item{mode}{[default 'character'] mode of vector to be received - one of
'character', 'complex', 'double', 'integer', 'logical', 'numeric', or
'raw'. The raw vector received will be converted into the respective mode.}

\item{keep.raw}{[default TRUE] logical flag whether to keep the received raw
vector (useful for verification e.g. via hashing). If FALSE, will return
the converted data only.}

\item{bytes}{[default 10000] the maximum number of bytes to receive. Can be an
over-estimate, but note that a buffer of this size is reserved.}

\item{timeout}{(optional) in milliseconds.}
}
\value{
A 'recvAio' (object of class 'recvAio').
}
\description{
Receive data over a byte stream asynchronously. This is a low-level interface
    intended for communicating with non-NNG endpoints [experimental].
}
\details{
Receiving a byte stream asynchronously is non-blocking and returns
    a 'recvAio' immediately.

    For a 'recvAio', the received message is available at \code{$data}, and
    the raw message at \code{$raw} (if kept). An 'unresolved' logical NA is
    returned if the async operation is yet to complete.

    To wait for the async operation to complete and retrieve the received
    message, use \code{\link{call_aio}} on the returned 'recvAio' object.

    Alternatively, to stop the async operation, use \code{\link{stop_aio}}.

    In case of an error, an integer 'errorValue' is returned (to be
    distiguishable from an integer message value). This can be verified using
    \code{\link{is_error_value}}.

    If the raw data was successfully received but an error occurred in
    data conversion (for example if the incorrect mode was specified), the
    received raw vector will be stored at \code{$data} to allow for the data
    to be recovered.
}
