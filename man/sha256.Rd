% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sha.R
\name{sha256}
\alias{sha256}
\alias{sha224}
\alias{sha384}
\alias{sha512}
\title{Cryptographic Hashing Using the SHA-2 Algorithms}
\usage{
sha256(x, key = NULL)

sha224(x, key = NULL)

sha384(x, key = NULL)

sha512(x, key = NULL)
}
\arguments{
\item{x}{an object.}

\item{key}{(optional) supply a secret key to generate an HMAC. If missing or
NULL, the SHA-256/224/384/512 hash of 'x' is returned.}
}
\value{
A 'nanoHash' object - raw vector of length 32 for SHA-256,
    28 for SHA-224, 48 for SHA-384, and 64 for SHA-512.
}
\description{
Returns a SHA-256, SHA-224, SHA-384, or SHA-512 hash or HMAC of the supplied
    R object. Uses the optimised implementation from the Mbed TLS library.
}
\details{
For arguments 'x' and 'key', a raw vector is hashed directly, a
    scalar character string is translated to raw without serialisation,
    whilst all other objects are serialised first.

    Use \code{as.character()} to convert the returned raw vector to a single
    character string.
}
\examples{
# SHA-256 hash:
sha256("hello world!")

# Convert to character string:
as.character(sha256("hello world!"))

# Obtain HMAC:
sha256("hello world!", "SECRET_KEY")

# Hashing a file:
tempfile <- tempfile()
cat(rep(letters, 256), file = tempfile)
con <- file(tempfile, open = "rb")
vec <- NULL
while (length(upd <- readBin(con, raw(), 8192))) vec <- c(vec, upd)
sha256(vec)
close(con)
unlink(tempfile)

# SHA-224 hash:
sha224("hello world!")

# SHA-384 hash:
sha384("hello world!")

# SHA-512 hash:
sha512("hello world!")

}
