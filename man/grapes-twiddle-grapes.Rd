% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipe.R
\name{\%~\%}
\alias{\%~\%}
\title{Meanwhile (Concurrency) Pipe}
\usage{
x \%~\% expr
}
\arguments{
\item{x}{the output of a deferred evaluation pipe \code{\link{\%>>\%}} i.e.
possibly an 'unresolvedExpr'.}

\item{expr}{an expression to evaluate, repeated as in a while loop, whilst
'x' remains unresolved.}
}
\value{
The evaluated result of 'x'.
}
\description{
Pipe an expression to execute in a loop whilst waiting for a potentially
    'unresolvedExpr' to resolve.
}
\details{
Intended to be used at the end of an expression involving the
    deferred evaluation pipe \code{\link{\%>>\%}} to:

    (i) provide certainty of the return value, which will always be the
    evaluated result rather than a 'resolvedExpr'.

    (ii) make it convenient to write concurrent code that runs whilst the
    expression is resolving.
}
\section{Usage}{


    \code{x \%~\% expr}

    is equivalent to the following expression, finally returning \code{x}:

    \code{if (unresolved(x)) while (unresolved(x <- x$data)) {expr}; x}
}

\examples{
if (interactive()) {
# Only run examples in interactive R sessions

s1 <- socket("pair", listen = "tcp://127.0.0.1:6546")
s2 <- socket("pair", dial = "tcp://127.0.0.1:6546")

n <- 0L
rec <- recv_aio(s2)
a <- rec$data \%>>\% identical(data.frame()) \%~\% {
  if (n == 100) send_aio(s1, data.frame())
  cat("unresolved", n, "\n")
  n <- n + 1
}
a

msg <- recv_aio(s2)
# execute the following send from another R process for a better demonstration:
r <- send_aio(s1, data.frame())
b <- msg$data \%>>\% identical(data.frame()) \%~\% call_aio(msg)
b

close(s1)
close(s2)
}

}
